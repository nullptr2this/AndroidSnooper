apply plugin: 'com.android.library'
apply plugin: 'spoon'
apply plugin: 'jacoco'
apply from: '../Publish.gradle'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    group "com.github.jainsahab"
    version snooperVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName snooperVersion
        testInstrumentationRunner "com.prateekj.snooper.SnooperInstrumentationRunner"
        multiDexEnabled true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
        }

    }

    sourceSets {
        String sharedTestDir = 'src/sharedTestDataHelpers/java'
        String sharedTestAssetDir = 'src/sharedTestDataHelpers/assets'
        test {
            java.srcDir sharedTestDir
            assets.srcDir sharedTestAssetDir
        }
        androidTest {
            java.srcDir sharedTestDir
            assets.srcDir sharedTestAssetDir
        }
    }

    testOptions {
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }

    packagingOptions {
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'LICENSE.txt'
    }
}

spoon {
    debug = true
    codeCoverage = true
    grantAllPermissions = true
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "$project.buildDir/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
    ])
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'androidx.appcompat:appcompat:1.0.0'
    compile 'com.google.android.material:material:1.0.0'
    compile "androidx.recyclerview:recyclerview:1.0.0"
    compile 'androidx.cardview:cardview:1.0.0'
    compile 'org.apache.commons:commons-lang3:3.5'
    compile 'com.google.guava:guava:22.0-android'
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.19'
    androidTestCompile 'androidx.annotation:annotation:1.0.0'
    androidTestCompile 'androidx.test:runner:1.1.0-alpha4'
    androidTestCompile 'org.mockito:mockito-core:1.10.19'
    androidTestCompile 'com.google.dexmaker:dexmaker:1.2'
    androidTestCompile 'com.google.dexmaker:dexmaker-mockito:1.2'
    androidTestCompile 'io.reactivex:rxjava:1.1.0'
    androidTestCompile 'androidx.test.espresso:espresso-core:3.1.0-alpha4'
    androidTestCompile 'androidx.test.espresso:espresso-contrib:3.1.0-alpha4'
    androidTestCompile 'androidx.test.espresso:espresso-intents:3.1.0-alpha4'
    androidTestCompile 'androidx.test:runner:1.1.0-alpha4'
    androidTestCompile 'com.squareup.spoon:spoon-client:1.5.4'
}

apply from: '../maven-push.gradle'